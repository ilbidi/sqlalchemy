* TEST02
** Intro
Test su separazione dell'oggetto con la definizione del db e il programma di
utilizzo, copio la struttura del file system dal sito
https://coderwall.com/p/lt2kew/python-creating-your-project-structure

** Cosa ho fatto
si creeranno 2 files
- main.py da lanciare
- model.py con la struttura delle tabelle

la struttura corretta sembra essere creare in file, database.py, con
la configurazione del database da importare neglia altri moduli,
un file, models.py, con le tabelle e un file main.py di lancio.

* TEST03
** Intro
Ristrutturazione programmi per gestione con unit testing
Ho installato il pacchetto nose con pip install nose
In pratica si tratta di spostare quanto fatto nel main in un pacchetto
di test. Il main potrebbe anche essere lasciato vuoto

*** DONE Creare un main
Creato un main con un file di configurazione log separato.
PEr richiamare il sistema esegure un import logconfig e caricare il logger con la funzione logging.getLogger, buona pratica è utilizare l'attributo 
__name__ per definire quale sia il modulo che esegue il log

*** DONE Creare nella directory models una struttura tabella
Porre attenzione a certi tipi di database, non tutti i campi sono supportati
(o sono supportati in modi diversi, ad esempio in mysql è obbligatorio
inserire la lunghezza di un campo stringa), su altri DB tipo oracle 
è necessario definire come Sequence i campi autoincrementanti

*** DONE Creare un test che verifichi la creazione e distruzione DB
Per alcuni tipi di DB, tipo mysql, in fase di tar down va prima esegito un roll back 
della sessione per essere pena il blocco del test.

per i test ho utilizzato nose, un comando importante (oltre al paramatro -v per vedere che test 
staeseguendo) è --nocapture che permette di vedere a video lo stdout che, normalmente, 
è noascosto da nose.
* TEST04
** Intro
Strutturazione models per gestione ricezione dati da rilevatori distribuiti
si creeranno nuove classi e nuove tabelle.
A grandi linee la base dati sarà organizzata così

| Modello    | Note                                            | Relazioni |
|------------+-------------------------------------------------+-----------|
| device     | Dispositivo che legge i dati (microcontrollore) |           |
| devicetype | Tipo di dispositivo                             |           |
| sensortype | Tipo di sensore                                 |           |
| data       | Dati ricevuti dai dispositivi                   |           |

** TODO Definire modelli dati e relazioni
*** DONE tabella device
| Campo       | Tipo        | Note                                |
|-------------+-------------+-------------------------------------|
| id          | Integer     | chiave unica autoincrementante      |
| code        | String(100) | Codice device                       |
| description | String(256) | Descrizione dispositivo             |
| devicetype  | devicetype  | Tipo dispositivo                    |
| sensors     | sensors     | Lista sensori dispositivo           |
|             |             |                                     |
*** DONE tabella sensor
| Campo       | Tipo        | Note                                |
|-------------+-------------+-------------------------------------|
| id          | Integer     | chiave unica autoincrementante      |
| code        | String(100) | Codice sensor                       |
| description | String(256) | Descrizione sensor                  |
| sensortype  | sensortype  | Tipo sensore                        |
|             |             |                                     |
*** DONE tabella devicetype
| Campo       | Tipo        | Note                                |
|-------------+-------------+-------------------------------------|
| id          | Integer     | chiave unica autoincrementante      |
| code        | String(100) | Codice devicetype                   |
| description | String(256) | Descrizione tipo dispositivo        |
|             |             |                                     |
*** DONE tabella sensortype
| Campo       | Tipo        | Note                                |
|-------------+-------------+-------------------------------------|
| id          | Integer     | chiave unica autoincrementante      |
| code        | String(100) | Codice sensortype                   |
| description | String(256) | Descrizione tipo sensore            |
|             |             |                                     |
*** DONE tabella data
| Campo      | Tipo       | Note                                  |
|------------+------------+---------------------------------------|
| id         | Integer    | chiave unica autoincrementante        |
| timestamp  | datetime   | Data e ora di lettura valore          |
| device     | device     | Dispositivo da cui il dato è ricevuto |
| sensortype | sensortype | Tipo di sensore                       |
| value      | float      | Valore sensore                        |
|            |            |                                       |
*** DONE relazioni
| Tabelle             | Tipo relazione |
|---------------------+----------------|
| sensor - sensorType | many to one    |
| device - deviceType | many to one    |
| device - sensor     | one to many    |
| data   - device     | one to many    |
*** TODO Su base dati
Va almento implementata l'unità di misura con la quale interpretare
il valore del sensore
** DONE Implementare models
*** DONE classe device
*** DONE classe device type
*** DONE classe sensortype
*** DONE classe data

** DONE Implementare test
*** DONE Test CRUD su singola tabella
*** DONE Test relazioni
* TEST05
** Intro
Inserimento e test di funzioni di utilità per la scrittura dati, il loro 
recupero, la loro visualizzazione (l'idea è di creare un output in 
json o xml).
Da sviluppare anche una corretta gestione delle eccezioni
Funzioni da implementare (l'idea è mascherare gli inserimenti a database)
| Classe     | Funzione    | Note                                                          |
|------------+-------------+---------------------------------------------------------------|
| SensorType | insert      | Inserimento di un tipo sensore, richiede codice e descrizione |
|            | list        | Recupero lista tipi sensore                                   |
|            | delete      | Cancellazione                                                 |
|            | list filter | Recupero lista filtrata                                       |
| DeviceType | insert      | vedi sopra                                                    |
|            | list        | vedi sopra                                                    |
|            | delete      |                                                               |
|            | list filter |                                                               |
| Sensor     | insert      |                                                               |
|            | list        |                                                               |
|            | delete      |                                                               |
|            | list filter |                                                               |
| Device     | insert      |                                                               |
|            | list        |                                                               |
|            | delete      |                                                               |
|            | list filter |                                                               |
| DeviceData | insert      | Inserimento di un valore, si richiede che si a obbligatorio   |
|            |             | un dispositivo                                                |
|            | list        | Elenco di tutta la lista delle letture                        |
|            | delete      | Cancellazine di una lettura                                   |
|            | list filter | lista filtrata, verificare bene il filtro per data            |
|            | json out    | Ouput oggetto in json                                         |
|            | Xml oul     | Output oggetto in xml                                         |
|            |             |                                                               |
L'idea è di iniziare dalla classe superiore, Device Data in modo da vedere cosa serve
per popolarla
** TODO Classe User
Cominciamo da una semplice classe dove creeremo un metodo getJson
*** TODO Json output
*** TODO Xmloutput
** TODO Classe Device Data
*** TODO Xml output
Estrazione dei dati classe device data in xml
*** TODO Json output
Estrazione dei dati classe device data in json
* TEST06
** Intro
Funzioni di utilità, si crea una nuova classe nel pacchetto model con funzioni di utilità per inserire dati 
nel db
| Funzione         | Note                                                  |
|------------------+-------------------------------------------------------|
| insertSensorType | Inserimento di un nuovo tipo di sensore, si richiede  |
|                  | codice e decrizione, nel caso in cui sia già presente |
|                  | si va in update                                       |
| insertSensor     | Inserimento di un sensore richiediamo codice e        |
|                  | Descrizione e tipo sensore                            |
| insertDeviceType |                                                       |
| insertDevice     |                                                       |
| addSensorDevice  |                                                       |
| insertDataRead   |                                                       |
|                  |                                                       |

Ad ora non sono arrivato a nulla
